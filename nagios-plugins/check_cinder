#!/usr/bin/python
"""
**  Copyright (C) 2014  Koffi Nogbe at gmail dot com

**  This program is free software: you can redistribute it and/or modify
**  it under the terms of the GNU General Public License as published by
**  the Free Software Foundation, either version 3 of the License, or
**  (at your option) any later version.

**  This program is distributed in the hope that it will be useful,
**  but WITHOUT ANY WARRANTY; without even the implied warranty of
**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
**  GNU General Public License for more details.

**  You should have received a copy of the GNU General Public License
**  along with this program.  If not, see <http://www.gnu.org/licenses/>.

**  ***********************************
**  This program allow you to monitor openstack cinder service
**  This is a content base monitor as oppose to just port check
**  It create a 1mb image and delete it and poll the time it takes to
**  to create/delete. It use a config file openrc.cfg
**  Syntax:
**  check_cinder -C/--config [config file] -v/--volume [volume to create] -w/--warning [warning timeout] -c/--critical [ critical timeout ]

"""
import sys
import time
import argparse
from cinderclient import client
from nagioslib.nagioslib import *

STATUS_OK = 0
STATUS_WARNING = 1
STATUS_CRITICAL = 2
STATUS_UNKNOWN = 3

defaultCFG = 'openrc.cfg'

def createVolume(cinder,volName):
	try:
		vol = cinder.volumes.create(display_name=volName,size=1)
	except:
		sys.exit(STATUS_CRITICAL)
		print "Unable to create volume."
	return vol

def delVolume(volLists,volID):
	volume = findVolume(volLists,volID)
	if volume:
		try:
			volume.delete
        	except:
                	sys.exit(STATUS_CRITICAL)
                	print "Unable to create volume."
	else:
                        sys.exit(STATUS_CRITICAL)
                        print "Unable to find volume. Volume %s will not be deleted" % (volID)

def delVolume(volume):
        try:
                volume.delete
        except:
                sys.exit(STATUS_CRITICAL)
                print "Unable to delete volume."


def findVolume(volLists,volId):
        """Find a specific volume from volume list
        """
        for vol in volLists:
		if vol.id == volId:
                	return vol
		


def main():
        parser = argparse.ArgumentParser(description="check_keystone nagios plugin for OpenStack Keystone")
        parser.add_argument("-C","--config", help="Openstack rc configuration file - default is openrc.cfg")
        parser.add_argument("-v","--volume", help="OpenStack image to monitor", required=True)
        parser.add_argument("-w","--warning", help="Warning time to retrieve the user", required=True)
        parser.add_argument("-c","--critical", help="Critical time to retrieve the user", required=True)

        args = parser.parse_args()

        if args.config:
                configFile = args.config
        else:
                configFile = defaultCFG

        cred = credential(configFile)
        startTime = time.time()
        try:
                cin = client.Client('1',cred.getCinder()['username'],cred.getCinder()['password'],cred.getCinder()['tenant_name'],cred.getCinder()['auth_url'])

        except:
                print "Unable to connect to OpenStack API endpoint."
                sys.exit(STATUS_CRITICAL)
	#Create a 1mg volume
	volume = createVolume(cin,args.volume)
	#Delete volume
	delVolume(volume)
	endTime = time.time()
	timeElapse = endTime - startTime
	if timeElapse < float(args.warning):
		print "OpenStack Cinder OK! Cinder Volune %s retrieval successfull. Time taken for volume create/delete %s | Cinder Volume Operation Time=%s" % (args.volume,round(timeElapse,3),round(timeElapse,3))
		sys.exit(STATUS_OK)
	elif (timeElapse >= float(args.warning)) and (timeElapse < float(args.critical)):
		print "OpenStack Cinder Warning! Cinder Volume %s retrieval successfull but time taken was longer. Time taken for create/delete %s | Cinder Volume Operation Time=%s" % (args.volume,round(timeElapse,3),round(timeElapse,3))
		sys.exit(STATUS_WARNING)
	elif timeElapse >= float(args.critical):
		print "OpenStack Cinder Critical! Cinder Volume %s create/delete successfull but time taken was longer than critical time. Time taken for create/delete %s | Cinder Volume Operation Time=%s" % (args.volume,round(timeElapse,3),round(timeElapse,3))
		sys.exit(STATUS_CRITICAL)
	
if __name__ == '__main__':
        main()

